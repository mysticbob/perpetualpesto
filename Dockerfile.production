# syntax=docker/dockerfile:1.5

# ============================================
# Base stage - Common setup for all stages
# ============================================
FROM oven/bun:1-alpine AS base

# Install security updates and required packages
RUN apk update && \
    apk upgrade && \
    apk add --no-cache \
    dumb-init \
    curl \
    tzdata \
    && rm -rf /var/cache/apk/*

# Set timezone
ENV TZ=UTC

# Create app user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# ============================================
# Dependencies stage - Install production deps
# ============================================
FROM base AS deps

# Copy package files
COPY --chown=nodejs:nodejs package.json bun.lockb* ./

# Install production dependencies with cache mount
RUN --mount=type=cache,target=/root/.bun \
    bun install --frozen-lockfile --production

# ============================================
# Dev dependencies stage - For building
# ============================================
FROM deps AS dev-deps

# Install all dependencies including dev
RUN --mount=type=cache,target=/root/.bun \
    bun install --frozen-lockfile

# ============================================
# Builder stage - Build the application
# ============================================
FROM base AS builder

WORKDIR /app

# Copy dependencies
COPY --from=dev-deps --chown=nodejs:nodejs /app/node_modules ./node_modules

# Copy source code
COPY --chown=nodejs:nodejs . .

# Generate Prisma client
RUN bunx prisma generate

# Build the application
ENV NODE_ENV=production
ENV VITE_API_URL=/api

# Build with optimizations
RUN bun run build && \
    # Remove source maps for production
    find dist -name "*.map" -delete && \
    # Optimize bundle size
    find dist -name "*.js" -exec bun build {} --minify --outfile {} \; 2>/dev/null || true

# ============================================
# Production stage - Minimal final image
# ============================================
FROM base AS production

ENV NODE_ENV=production
ENV PORT=3001

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

WORKDIR /app

# Copy only necessary files for production
COPY --from=deps --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/public ./public
COPY --from=builder --chown=nodejs:nodejs /app/package.json ./package.json
COPY --from=builder --chown=nodejs:nodejs /app/server ./server
COPY --from=builder --chown=nodejs:nodejs /app/node_modules/.prisma ./node_modules/.prisma
COPY --chown=nodejs:nodejs prisma ./prisma

# Create necessary directories
RUN mkdir -p /app/uploads /app/logs && \
    chown -R nodejs:nodejs /app/uploads /app/logs

# Switch to non-root user
USER nodejs

# Expose the application port
EXPOSE 3001

# Health check with retry logic
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:3001/health || exit 1

# Start the production server
CMD ["bun", "run", "server/index.ts"]