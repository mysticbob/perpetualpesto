version: '3.9'

# Define networks
networks:
  # Internal network for service communication
  internal:
    driver: bridge
    internal: true  # No external access
    ipam:
      config:
        - subnet: 172.28.0.0/16
  
  # Frontend network with external access (only for web app)
  frontend:
    driver: bridge

# Define volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local

services:
  # PostgreSQL Database - Internal only
  postgres:
    image: postgres:15-alpine
    container_name: nclb_postgres
    restart: unless-stopped
    networks:
      - internal
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-recipe_planner}
      POSTGRES_USER: ${POSTGRES_USER:-recipe_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Database password required}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-recipe_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /run/postgresql
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Redis Cache - Internal only
  redis:
    image: redis:7-alpine
    container_name: nclb_redis
    restart: unless-stopped
    networks:
      - internal
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:?Redis password required}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Database migrations
  migrate:
    build:
      context: .
      target: migrate
    container_name: nclb_migrate
    networks:
      - internal
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-recipe_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-recipe_planner}?schema=public&sslmode=disable
    command: ["bunx", "prisma", "migrate", "deploy"]
    security_opt:
      - no-new-privileges:true

  # Main Application
  app:
    build:
      context: .
      target: production
      args:
        NODE_ENV: production
    image: nochickenleftbehind:latest
    container_name: nclb_app
    restart: unless-stopped
    networks:
      - internal
      - frontend
    ports:
      - "127.0.0.1:${PORT:-3000}:3000"  # Only bind to localhost
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-recipe_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-recipe_planner}?schema=public&sslmode=disable
      
      # Redis
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379/0
      
      # Firebase
      FIREBASE_API_KEY: ${FIREBASE_API_KEY:?Firebase API key required}
      FIREBASE_AUTH_DOMAIN: ${FIREBASE_AUTH_DOMAIN:?Firebase auth domain required}
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID:?Firebase project ID required}
      
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY:?OpenAI API key required}
      OPENAI_ORG_ID: ${OPENAI_ORG_ID:-}
      
      # AI Configuration
      AI_MODEL_CHAT: ${AI_MODEL_CHAT:-gpt-4-turbo-preview}
      AI_MODEL_VISION: ${AI_MODEL_VISION:-gpt-4-vision-preview}
      AI_MODEL_EMBEDDING: ${AI_MODEL_EMBEDDING:-text-embedding-3-small}
      AI_FEATURES_ENABLED: ${AI_FEATURES_ENABLED:-true}
      AI_CACHE_ENABLED: ${AI_CACHE_ENABLED:-true}
      AI_CACHE_TTL: ${AI_CACHE_TTL:-300}
      
      # App Configuration
      NODE_ENV: production
      PORT: 3000
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # Security
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      SESSION_SECRET: ${SESSION_SECRET:?Session secret required}
      
    volumes:
      - app_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    read_only: true
    tmpfs:
      - /tmp
      - /app/.next/cache
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: nclb_nginx
    restart: unless-stopped
    networks:
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /var/run
      - /var/cache/nginx
    profiles:
      - production