name: Deploy to Digital Ocean

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: registry.digitalocean.com
  IMAGE_NAME: nochicken

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Run tests
        run: bun test:run
      
      - name: Type check
        run: bun run tsc --noEmit

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to DO Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DO_REGISTRY_TOKEN }}
          password: ${{ secrets.DO_REGISTRY_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_ACCESS_TOKEN }}
      
      - name: Deploy to Digital Ocean Droplet
        env:
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts
          
          # Create deployment script
          cat > deploy_script.sh << 'SCRIPT'
          #!/bin/bash
          set -e
          
          echo "Starting deployment..."
          cd /opt/nochicken
          
          # Pull latest code
          git pull origin main
          
          # Update environment variables
          cp .env.production .env
          
          # Login to registry
          echo "${{ secrets.DO_REGISTRY_TOKEN }}" | docker login registry.digitalocean.com -u ${{ secrets.DO_REGISTRY_TOKEN }} --password-stdin
          
          # Pull latest images
          docker-compose -f docker-compose.production.yml pull
          
          # Run database migrations
          docker-compose -f docker-compose.production.yml run --rm app bunx prisma migrate deploy
          
          # Start services with zero-downtime deployment
          docker-compose -f docker-compose.production.yml up -d --remove-orphans
          
          # Wait for health checks
          sleep 10
          
          # Check if services are healthy
          docker-compose -f docker-compose.production.yml ps
          
          # Cleanup old images
          docker image prune -af --filter "until=24h"
          
          echo "Deployment completed successfully!"
          SCRIPT
          
          # Execute deployment
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${DEPLOY_USER}@${DROPLET_IP} 'bash -s' < deploy_script.sh
      
      - name: Verify deployment
        env:
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
        run: |
          # Wait for application to be ready
          sleep 30
          
          # Check health endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${DROPLET_IP}/health || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "Deployment successful! Application is healthy."
          else
            echo "Deployment verification failed. HTTP response: $response"
            exit 1
          fi
      
      - name: Send deployment notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to ${{ github.event.inputs.environment || 'production' }} ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Message: ${{ github.event.head_commit.message }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  rollback:
    needs: deploy
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Rollback deployment
        env:
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Rollback to previous version
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${DEPLOY_USER}@${DROPLET_IP} << 'ROLLBACK'
          cd /opt/nochicken
          
          # Get previous image tag
          PREVIOUS_TAG=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep nochicken | head -n 2 | tail -n 1)
          
          # Update docker-compose to use previous tag
          export IMAGE_TAG=${PREVIOUS_TAG}
          docker-compose -f docker-compose.production.yml up -d --remove-orphans
          
          echo "Rolled back to ${PREVIOUS_TAG}"
          ROLLBACK
      
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "  Deployment failed and was rolled back",
              color: "warning"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}