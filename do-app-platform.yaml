# Digital Ocean App Platform Configuration
# Alternative deployment option using managed App Platform

name: nochicken-app
region: nyc

# Service specifications
services:
  # Main application service
  - name: api
    dockerfile_path: Dockerfile.production
    source_dir: /
    github:
      branch: main
      deploy_on_push: true
      repo: your-github-username/nochickenleftbehind
    
    # Environment variables
    envs:
      - key: NODE_ENV
        value: production
        type: GENERAL
      
      - key: PORT
        value: "3001"
        type: GENERAL
      
      - key: DATABASE_URL
        value: ${database.DATABASE_URL}
        type: GENERAL
      
      - key: REDIS_URL
        value: ${redis.REDIS_URL}
        type: GENERAL
      
      - key: JWT_SECRET
        type: SECRET
        value: ${JWT_SECRET}
      
      - key: SESSION_SECRET
        type: SECRET
        value: ${SESSION_SECRET}
      
      - key: OPENAI_API_KEY
        type: SECRET
        value: ${OPENAI_API_KEY}
      
      - key: ANTHROPIC_API_KEY
        type: SECRET
        value: ${ANTHROPIC_API_KEY}
      
      - key: FIREBASE_API_KEY
        type: SECRET
        value: ${FIREBASE_API_KEY}
      
      - key: FIREBASE_AUTH_DOMAIN
        value: ${FIREBASE_AUTH_DOMAIN}
        type: GENERAL
      
      - key: FIREBASE_PROJECT_ID
        value: ${FIREBASE_PROJECT_ID}
        type: GENERAL
      
      - key: INSTACART_CLIENT_ID
        type: SECRET
        value: ${INSTACART_CLIENT_ID}
      
      - key: INSTACART_CLIENT_SECRET
        type: SECRET
        value: ${INSTACART_CLIENT_SECRET}
      
      - key: INSTACART_REDIRECT_URI
        value: https://${APP_URL}/api/instacart/callback
        type: GENERAL
    
    # Health check
    health_check:
      http_path: /health
      initial_delay_seconds: 30
      period_seconds: 30
      timeout_seconds: 10
      success_threshold: 1
      failure_threshold: 3
    
    # HTTP configuration
    http_port: 3001
    
    # Instance specifications
    instance_count: 1
    instance_size_slug: professional-xs  # 1 vCPU, 2GB RAM
    
    # Auto-scaling (optional)
    # instance_count:
    #   min: 1
    #   max: 3
    # autoscaling:
    #   metrics:
    #     cpu:
    #       percent: 70
    #   min_instance_count: 1
    #   max_instance_count: 3
    
    # Routes
    routes:
      - path: /api
      - path: /health

# Static site for frontend
static_sites:
  - name: frontend
    dockerfile_path: Dockerfile.production
    output_dir: /app/dist
    source_dir: /
    
    github:
      branch: main
      deploy_on_push: true
      repo: your-github-username/nochickenleftbehind
    
    # Build command
    build_command: bun run build
    
    # Environment variables for build
    environment_slug: node-js
    envs:
      - key: NODE_ENV
        value: production
        scope: BUILD_TIME
      
      - key: VITE_API_URL
        value: https://${APP_URL}/api
        scope: BUILD_TIME
      
      - key: VITE_FIREBASE_API_KEY
        value: ${FIREBASE_API_KEY}
        scope: BUILD_TIME
      
      - key: VITE_FIREBASE_AUTH_DOMAIN
        value: ${FIREBASE_AUTH_DOMAIN}
        scope: BUILD_TIME
      
      - key: VITE_FIREBASE_PROJECT_ID
        value: ${FIREBASE_PROJECT_ID}
        scope: BUILD_TIME
    
    # Routes
    routes:
      - path: /
    
    # Error pages
    error_document: index.html
    catchall_document: index.html
    
    # CORS
    cors:
      allow_origins:
        - prefix: https://${APP_URL}
      allow_methods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allow_headers:
        - Content-Type
        - Authorization

# Database configuration
databases:
  - name: database
    engine: PG
    version: "15"
    size: db-s-1vcpu-1gb  # Basic tier
    num_nodes: 1
    
    # Production mode enabled
    production: true

# Redis for caching
# Note: Redis is not directly available on App Platform
# You would need to use a managed Redis from DO or external service
# Alternative: Use DO Managed Redis Database
# databases:
#   - name: redis
#     engine: REDIS
#     version: "7"
#     size: db-s-1vcpu-1gb
#     num_nodes: 1

# Workers for background jobs (if needed)
workers:
  - name: backup-worker
    dockerfile_path: Dockerfile.production
    source_dir: /
    
    github:
      branch: main
      deploy_on_push: false
      repo: your-github-username/nochickenleftbehind
    
    # Run backup script
    run_command: /app/scripts/backup-db.sh
    
    instance_count: 1
    instance_size_slug: basic-xxs
    
    envs:
      - key: DATABASE_URL
        value: ${database.DATABASE_URL}
        type: GENERAL
      
      - key: DO_SPACES_KEY
        type: SECRET
        value: ${DO_SPACES_KEY}
      
      - key: DO_SPACES_SECRET
        type: SECRET
        value: ${DO_SPACES_SECRET}
      
      - key: DO_SPACES_BUCKET
        value: ${DO_SPACES_BUCKET}
        type: GENERAL

# Jobs for one-time tasks
jobs:
  - name: migrate
    kind: PRE_DEPLOY
    dockerfile_path: Dockerfile.production
    source_dir: /
    
    github:
      branch: main
      deploy_on_push: true
      repo: your-github-username/nochickenleftbehind
    
    # Run migrations before deployment
    run_command: bunx prisma migrate deploy
    
    instance_size_slug: basic-xxs
    
    envs:
      - key: DATABASE_URL
        value: ${database.DATABASE_URL}
        type: GENERAL

# Alerts configuration
alerts:
  - rule: DEPLOYMENT_FAILED
  - rule: DEPLOYMENT_LIVE
  - rule: DOMAIN_FAILED
  - rule: DOMAIN_LIVE

# Domains
domains:
  - domain: nochicken.yourdomain.com
    type: PRIMARY
    zone: yourdomain.com

# Features
features:
  - buildpack-stack=ubuntu-22

# Notes for deployment:
# 1. Replace 'your-github-username' with your actual GitHub username
# 2. Replace 'yourdomain.com' with your actual domain
# 3. Set all required environment variables in DO App Platform dashboard
# 4. Configure GitHub integration for automatic deployments
# 5. Set up DO Spaces for backups (optional)
# 6. Consider using DO Managed Redis for caching
# 7. Monitor costs - App Platform can be more expensive than Droplets for always-on apps